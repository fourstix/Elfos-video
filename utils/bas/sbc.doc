ASM
CLS
DATA number,number,...
DEALLOC addr
DMA expr
DPOKE addr,value
END
FOR var=expr TO expr [STEP expr]
GOSUB line
GOTO line
IDLE
IF expr THEN statement
INPUT ["prompt",]var[,var][,var][,...]
INTR line
IOFF
ION
[LET] var=expr
LOCATE y,x
NEXT [var]
ON expr GOSUB line,line,...
ON expr GOTO line,line,...
OUT port,value
POKE addr,value
PRINT expr[,;]expr[,;]...
Q expr
READ var,var,...
REM text
RESTORE [line]
RETURN [line]

Expressions:
  +
  -
  *
  /
  %
  &
  |
  ^
  =
  <>
  <
  >
  <=
  >=
  $hexnum
  ABS(expr)
  ALLOC(expr)
  ACOS(expr)
  ASIN(expr)
  ATAN(expr)
  CINT(expr)
  COS(expr)
  CSNG(expr)
  DPEEK(addr)
  EXP(addr)
  FLG(expr)
  FRE(addr)
  INP(port)
  LN(expr)
  PEEK(addr)
  RND(range)
  SGN(expr)
  SIN(expr)
  SQRT(expr)
  TAN(expr)

System variables:
  DATA_        - Address of DATA pointer
  FREE_        - Address of free RAM
  LFSR_        - MSW of 32-bit LFSR RND seed
  LFSR__       - LSW of 32-bit LFSR RND seed


*ISTART
*IRETURN


Variables:
  Variable names can be more than 1 character, but must start with a letter
and then must consist of either upper or lowercase letter or numbers or the
underscaore (_) character.  Case is irrelevant.

  Varaibles are stored either at the specified address, else the first byte
in RAM after the program (if program is compiled for RAM) else the first byte
of RAM.

Notes:
  Multiple statements on a line are supported, statements must be separated
by the colon (:) character.

  Line numbers must be greater than 0 and less than 65536 and must appear
in order.

  All other numbers are 16-bit signed integers (unless -32 or -fp is used).

  if term=none then PRINT and INPUT will not produce any code, nor will they
produce errors during compile.

  if term=bios then terminal i/o expects the Elf/OS BIOS to be present at
its normal address.

  if term=self then terminal i/o functions will be added to the output file
producing a fully self-contained program that has no external dependencies.

  In general whitespace is ignored and can be used as desired for legibility.
  
  A single line number must be contained on a single input line.  Each input
line is currently limited to 2048 character.

Switches:
-32             - compile in 32-bit mode
-fp             - enable floating point
-a              - produce assembly file
-A              - display assembly
-b              - output as binary
-c              - show compiler output
-i              - output as Intel hex
-l              - show source list
-r              - output as RCS hex
-s              - show assembler symbols
-v              - show variables
-lf             - set line endings to line-feed
-cr             - set line endings to carriag-return
-lfcr           - set line endings to line-feed/carriage-return
-crlf           - set line endings to carriage-return/line-feed
-nq             - normal Q for internal serial port
-rq             - reverse Q for internal serial port
-ef?            - Set EF line for internal serial port (?=1-4)
-ref?           - Set reverse EF line for internal serial port (?=1-4)
-ram=start-end  - set ram address range
-rom=start-end  - set rom address range
-start=hex      - Set start address
-exit=hex       - Set address to jump to on exit
-vars=hex       - Start of variable table
-stack=hex      - set address for top of stack
-estack=hex     - set address for top of expression stack 
-heap=hex       - set address for top of heap
-keybuf=hex     - size of key buffer
-term=bios      - use BIOS terminal i/o (default)
     =self      - use internal serial i/o
     =none      - no terminal
-elfos          - produce an Elf/OS executable
-stg            - produce STG compatible image (sets -exit=8003)
-melf           - -ram=0000-7fff -rom=8000-ffff -nq -ef2
-pev            - -ram=0000-7fff -rom=8000-ffff -nq -ef2
-pev2           - -ram=0000-7fff -rom=8000-ffff -rq -ref2
-elf2k          - -ram=0000-7fff -rom=8000-ffff -nq -ef3
-mclo           - -ram=0000-7fff -rom=8000-ffff -nq -ef3
-mchi           - -ram=8000-ffff -rom=0000-7fff -nq -ef3
-mchip          - -ram=8000-ffff -rom=0000-7fff -rq -ref3


